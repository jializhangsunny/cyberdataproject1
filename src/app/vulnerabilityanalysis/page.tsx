"use client";

import React, { useState } from "react";
import { Card } from "@/components/ui/card";
import Link from "next/link";
import { useSearchParams } from "next/navigation";


// Organization Vulnerabilities (Vo) (internal)
const INTERNAL_VULNERABILITIES = [
  {
    id: "CVE-2017-0144",
    cvss: 8.1,
    system: "Microsoft Windows",
    status: "Active",
  },
  {
    id: "CVE-2017-5638",
    cvss: 9.8,
    system: "Apache Struts 2 Framework",
    status: "Patched",
  },
  {
    id: "CVE-2018-11776",
    cvss: 9.8,
    system: "Apache Struts",
    status: "In Progress",
  },
];

// Threat Actor Known Exploits (Vt) (external)
const EXTERNAL_EXPLOITS = [
  { id: "CVE-2017-0144", pattern: "SMB Remote Code Execution" },
  { id: "CVE-2017-5638", pattern: "Remote Code Execution" },
  { id: "CVE-2021-44228", pattern: "Remote Code Execution" },
];

// VL options
const VL_OPTIONS = [
  { label: "Very Low", value: 0 },
  { label: "Low", value: 0.2 },
  { label: "Moderate", value: 0.5 },
  { label: "High", value: 0.8 },
  { label: "Very High", value: 1 },
];



export default function VulnerabilityAnalysis() {
    const searchParams = useSearchParams();
 const tefValue = parseFloat(searchParams.get("tefValue") || "0");

  const [vlValues, setVlValues] = useState<{ [key: string]: number }>({});
  const [isGuideVisible, setIsGuideVisible] = useState(false);


  // Get common vulnerabilities (Vtn = Vo ∩ Vt)
  const commonVulnerabilities = INTERNAL_VULNERABILITIES.filter((v) =>
    EXTERNAL_EXPLOITS.some((e) => e.id === v.id)
  ).map((v) => ({
    ...v,
    pattern: EXTERNAL_EXPLOITS.find((e) => e.id === v.id)?.pattern || "",
  }));

  // Calculate LEF Value and Total LEF
  const calculateLEF = (vl: number) => vl * tefValue;
  const totalLEF =
    Object.values(vlValues).reduce((acc, vl) => acc + calculateLEF(vl), 0) / 2;

  // Handle VL change
  const handleVLChange = (id: string, value: number) => {
    setVlValues({ ...vlValues, [id]: value });
  };

  return (
    <div className="flex h-screen bg-gray-900 text-white">
      {/* Sidebar Navigation */}
      <div className="w-1/4 bg-gray-800 p-6">
        <h2 className="text-2xl font-bold mb-4">Navigation</h2>
        <nav className="flex flex-col space-y-4">
          <Link
            href="/"
            className="p-3 bg-gray-700 text-gray-300 rounded-md hover:bg-gray-600"
          >
            Threat Actor Analysis
          </Link>
          <Link
            href="/riskanalysis"
            className="p-3 bg-gray-700 text-gray-300 rounded-md hover:bg-gray-600"
          >
            Risk Analysis
          </Link>
          <Link
            href="/vulnerabilityanalysis"
            className="p-3 bg-blue-500 text-white rounded-md hover:bg-blue-600"
          >
            Vulnerability Analysis
          </Link>
           <Link
          href="/securitycontrolsanalysis"
          className="p-3 bg-gray-700 text-gray-300 rounded-md hover:bg-gray-600"
        >
          Security Controls Analysis and ROSI Calculation
        </Link>
        </nav>
      </div>

      {/* Main Content */}
      <div className="w-3/4 p-6 overflow-y-auto">
        <h1 className="text-2xl font-bold mb-6">Vulnerability Analysis</h1>

        {/* Organization Vulnerabilities (Vo) */}
        <Card className="p-6 mb-8 bg-gray-300">
          <h2 className="text-xl font-semibold mb-4">
            Organization Vulnerabilities (Vo) (internal)
          </h2>
          {INTERNAL_VULNERABILITIES.map((v) => (
            <div key={v.id} className="mb-4">
              <p>
                <strong>Vulnerability ID:</strong> {v.id}
              </p>
              <p>
                <strong>CVSS Score:</strong> {v.cvss}
              </p>
              <p>
                <strong>Affected System:</strong> {v.system}
              </p>
              <p>
                <strong>Status:</strong>{" "}
                <select
                  className="bg-red-400 p-2 rounded-md"
                  defaultValue={v.status}
                >
                  <option>Active</option>
                  <option>Patched</option>
                  <option>In Progress</option>
                </select>
              </p>
            </div>
          ))}
        </Card>

        {/* Threat Actor Known Exploits (Vt) */}
        <Card className="p-6 mb-8 bg-gray-300">
          <h2 className="text-xl font-semibold mb-4">
            Threat Actor Known Exploits (Vt) (external)
          </h2>
          {EXTERNAL_EXPLOITS.map((v) => (
            <div key={v.id} className="mb-4">
              <p>
                <strong>Vulnerability ID:</strong> {v.id}
              </p>
              <p>
                <strong>Attack Pattern:</strong> {v.pattern}
              </p>
            </div>
          ))}
        </Card>

        {/* Common Vulnerabilities (Vtn = Vo ∩ Vt) */}
        <Card className="p-6 mb-8 bg-gray-300">
          <h2 className="text-xl font-semibold mb-4">
            Common Vulnerabilities (Vtn = Vo ∩ Vt)
          </h2>
          {commonVulnerabilities.map((v) => {
            const vl = vlValues[v.id] || 0;
            const lefValue = calculateLEF(vl);
            return (
              <div key={v.id} className="mb-6">
                <p>
                  <strong>Vulnerability ID:</strong> {v.id}
                </p>
                <p>
                  <strong>CVSS Score:</strong> {v.cvss}
                </p>
                <p>
                  <strong>Attack Pattern:</strong> {v.pattern}
                </p>
                <p>
                  <strong>Status:</strong> {v.status}
                </p>
                <p>
                  <strong>Vulnerability Level (VL):</strong>{" "}
                  <select
                    value={vl}
                    onChange={(e) =>
                      handleVLChange(v.id, parseFloat(e.target.value))
                    }
                    className="bg-blue-300 p-2 rounded-md"
                  >
                    {VL_OPTIONS.map((opt) => (
                      <option key={opt.value} value={opt.value}>
                        {opt.label}
                      </option>
                    ))}
                  </select>
                </p>
                <p className="text-green-500 font-bold mt-2">
                  LEF Value: {lefValue.toFixed(2)}
                </p>
              </div>
            );
          })}
        </Card>

        {/* Total LEF Calculation */}
        <Card className="p-6 mb-8 bg-gray-800">
          <h2 className="text-xl text-red-500 font-semibold mb-4">Total LEF Value</h2>
          <p className="text-red-500 font-bold text-2xl">
            Total LEF = {totalLEF.toFixed(2)}
          </p>
        </Card>

        {/* VL Assessment Reference Guide Button */}
        <button
          onClick={() => setIsGuideVisible(true)}
          className="p-3 bg-blue-500 text-white rounded-md hover:bg-blue-600"
        >
          Show VL Assessment Reference Guide
        </button>
      </div>

      {/* VL Assessment Reference Guide Modal */}
      {isGuideVisible && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center">
          <div className="bg-gray-800 p-6 rounded-md max-w-lg">
            <h2 className="text-xl font-semibold mb-4">
              VL Assessment Reference Guide
            </h2>
            <ul className="list-disc space-y-2 pl-4">
              <li>VL = 1: CVSS ≥ 9 and status is Active</li>
              <li>VL = 0.8: CVSS 7-8.9 and status is Active</li>
              <li>VL = 0.5: CVSS 4-6.9 or higher score but In Progress</li>
              <li>VL = 0.2: CVSS &lt; 4 or mitigation measures are in place</li>
              <li>VL = 0: Patched vulnerability</li>
            </ul>
            <button
              onClick={() => setIsGuideVisible(false)}
              className="mt-4 p-2 bg-red-500 text-white rounded-md hover:bg-red-600"
            >
              Close Guide
            </button>
          </div>
        </div>
      )}
    </div>
  );
}
