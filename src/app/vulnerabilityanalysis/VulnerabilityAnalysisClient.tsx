"use client";

import React, { useState, useEffect } from "react";
import { Card } from "@/components/ui/card";
import Link from "next/link";
import { useAppContext } from "@/context/appcontext";

// data define
const INTERNAL_VULNERABILITIES = [
  { id: "CVE-2017-0144", cvss: 8.1, system: "Microsoft Windows", status: "Patched" },
  { id: "CVE-2017-5638", cvss: 9.8, system: "Apache Struts 2 Framework", status: "Active" },
  { id: "CVE-2018-11776", cvss: 9.8, system: "Apache Struts", status: "Patched" },
];

const EXTERNAL_EXPLOITS = [
  { id: "CVE-2017-0144", pattern: "SMB Remote Code Execution",tool: "EternalBlue"  },
  { id: "CVE-2017-5638", pattern: "Remote Code Execution",     tool: "Exploit-Kit-X" },
  { id: "CVE-2021-44228", pattern: "Remote Code Execution",     tool: "Log4Shell Kit"  },
];

const VL_OPTS = [
  { lbl: "Very Low",  val: 0   },
  { lbl: "Low",       val: 0.2 },
  { lbl: "Moderate",  val: 0.5 },
  { lbl: "High",      val: 0.8 },
  { lbl: "Very High", val: 1   },
];



// Selecting colour
const statusColor = (s: string) =>
    s === "Patched"
    ? "bg-green-100 text-green-700"
    : s === "In Progress"
    ? "bg-yellow-100 text-yellow-700"
    : "bg-red-100 text-red-700"; // Active

const Td: React.FC<
  React.TdHTMLAttributes<HTMLTableCellElement>
> = ({ children, className = "", ...rest }) => (
  <td
    {...rest}
    className={`px-2 py-1 border-t border-gray-300 ${className}`}
  >
    {children}
  </td>
);

export default function VulnerabilityAnalysisClient() {
  const { tefValue, settotalLef } = useAppContext();
  const [vlValues, setVlValues] = useState<{ [key: string]: number }>({
  "CVE-2017-5638": 1,      //Very High
  "CVE-2017-0144": 0.2         //  Low
});

  const [statuses, setStatuses] = useState(
    INTERNAL_VULNERABILITIES.map((v) => v.status)
  );

  // VL guide
const [showGuide, setShowGuide] = useState(false);

  const common = INTERNAL_VULNERABILITIES
    .filter(i => EXTERNAL_EXPLOITS.some(e => e.id === i.id))
    .map(i => ({ ...i, ...EXTERNAL_EXPLOITS.find(e => e.id === i.id)! }));


  const calcLEF  = (vl:number)=>vl * tefValue;
  const lefArr = common.map(v => calcLEF(vlValues[v.id] ?? 0));
  const nonZero = lefArr.filter(x => x !== 0);
  const totalLEF = nonZero.length
  ? nonZero.reduce((sum, v) => sum + v, 0) / nonZero.length
  : 0;

  useEffect(() => {settotalLef(totalLEF);}, [totalLEF]);

  const handleVLChange = (id: string, value: number) => {
    setVlValues((prev) => ({ ...prev, [id]: value }));
  };



  return (
    <div className="flex h-screen bg-gray-900 text-white">
      {/* Sidebar */}
      <div className="w-1/4 bg-gray-800 p-6">
        <h2 className="text-2xl font-bold mb-4">Navigation</h2>
        <nav className="flex flex-col space-y-4">
          <Link href="/" className="p-3 bg-gray-700 text-gray-300 rounded-md hover:bg-gray-600">Threat Actor Analysis</Link>
          <Link href="/vulnerabilityanalysis" className="p-3 bg-blue-500 text-white rounded-md hover:bg-blue-600">Vulnerability Analysis</Link>
          <Link href="/riskanalysis" className="p-3 bg-gray-700 text-gray-300 rounded-md hover:bg-gray-600">Risk Analysis</Link>
          <Link href="/securitycontrolsanalysis" className="p-3 bg-gray-700 text-gray-300 rounded-md hover:bg-gray-600">Security Controls Analysis</Link>
        </nav>
      </div>

      {/* Main Content */}
      <div className="w-3/4 p-6 overflow-y-auto">
        <h1 className="text-2xl font-bold mb-6">Vulnerability Analysis</h1>

      <div className="space-y-8">

        {/* Vo Section */}
        <TableCard title="Organization Vulnerabilities (Vo)">
            <thead>
              <HeadRow cells={["Vulnerability ID","CVSS Score (0-10)","Affected System","Status"]}/>
            </thead>
            <tbody>
              {INTERNAL_VULNERABILITIES.map((v, i) => (
  <tr key={v.id} className="border-t border-gray-600">
    <Td>{v.id}</Td>
    <Td>{v.cvss}</Td>
    <Td>{v.system}</Td>
                  <Td className={statusColor(statuses[i])}>
      <select
        value={statuses[i]}
        onChange={(e) => {
          const copy = [...statuses];
          copy[i] = e.target.value;
          setStatuses(copy);
        }}
        className="bg-transparent outline-none px-2 py-1"
      >
        {["Active", "Patched", "In Progress"].map((s) => (
          <option key={s}>{s}</option>
        ))}
      </select>
    </Td>
  </tr>
))}
            </tbody>
          </TableCard>

        {/* Vt Section (external) */}
<TableCard title="Threat Actor Known Exploits (Vt)">
            <thead>
              <HeadRow cells={["Vulnerability ID","Attack Pattern","Tool/Malware Used"]}/>
            </thead>
            <tbody>
              {EXTERNAL_EXPLOITS.map(e=>(
                <tr key={e.id} className="border-t border-gray-600">
                  <Td>{e.id}</Td><Td>{e.pattern}</Td><Td>{e.tool}</Td>
                </tr>
              ))}
            </tbody>
          </TableCard>

        {/* Vtn Section */}
          <TableCard title="Common Vulnerabilities (Vtn = Vo ∩ Vt)">
            <thead>
              <HeadRow cells={["Vulnerability ID","CVSS Score","Affected System","Status","Vulnerability Level (VL)","LEF Value"]}/>
            </thead>
            <tbody>
              {common.map(v=>{
                const vl  = vlValues[v.id] ?? 0;
                const lef = calcLEF(vl);
                return (
                  <tr key={v.id} className="border-t border-gray-600">
                    <Td>{v.id}</Td>
                    <Td>{v.cvss}</Td>
                    <Td>{v.system}</Td>
                    <Td className={statusColor(v.status)}>{v.status}</Td>
                    <Td>
                      <select
                        value={vl}
                        onChange={e=>setVlValues(p=>({...p,[v.id]:parseFloat(e.target.value)}))}
                        className="bg-blue-700 rounded px-2 py-1 text-sm"
                      >
                        {VL_OPTS.map(o=><option key={o.val} value={o.val}>{o.lbl}</option>)}
                      </select>
                    </Td>
                    <Td>{lef.toFixed(8)}</Td>
                  </tr>
                );
              })}
            </tbody>
          </TableCard>

        {/* Total LEF */}
        <Card className="p-6 mb-8 bg-gray-800">
          <h2 className="text-xl text-red-500 font-semibold mb-4">Total LEF Value</h2>
          <p className="text-red-500 text-2xl font-bold">Total LEF = {totalLEF.toFixed(4)}</p>
        </Card>
      </div>
     </div>

        {/*Floating toggle button */}
<button
  onClick={() => setShowGuide(true)}
  className="fixed bottom-6 right-6 z-50 bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-full shadow-lg"
>
  VL Assessment Reference Guide
</button>

        {/*VL Assessment Reference Guide  */}
{showGuide && (
  <div className="fixed inset-0 z-40 flex items-center justify-center">
    <div
      className="absolute inset-0 bg-black/50"
      onClick={() => setShowGuide(false)}
    />

    {/* window */}
    <div className="relative z-50 w-[90%] max-w-md bg-white text-black rounded-lg shadow-xl p-6 space-y-4">
      <h3 className="text-xl font-bold text-center">VL Assessment Reference Guide</h3>
      <ul className="text-sm list-disc pl-5 space-y-1">
        <li><b>VL = 1</b>: CVSS ≥ 9 and Status is <b>Active</b></li>
        <li><b>VL = 0.8</b>: CVSS 7-8.9 and Status is<b>Active</b></li>
        <li><b>VL = 0.5</b>: CVSS 4-6.9 or higher score but <b>In&nbsp;Progress</b></li>
        <li><b>VL = 0.2</b>: CVSS &lt; 4 or mitigation measures are already in place</li>
        <li><b>VL = 0</b>:  <b>Patched vulnerability</b></li>
      </ul>

      <button
        onClick={() => setShowGuide(false)}
        className="mt-2 w-full bg-blue-600 hover:bg-blue-700 text-white py-2 rounded-md"
      >
        Close
      </button>
    </div>
  </div>
)}

    </div>
  );
}



function TableCard({ title, children }: { title: string; children: React.ReactNode }) {
  return (
    <Card className="bg-white text-black p-4 min-w-[340px] shadow">
      <h2 className="text-lg font-bold mb-2">{title}</h2>
      <div className="overflow-x-auto">
        <table className="w-full text-sm border border-gray-300">{children}</table>
      </div>
    </Card>
  );
}


const HeadRow = ({ cells }: { cells: string[] }) => (
  <tr className="bg-gray-200 border-b border-gray-300">
    {cells.map((c) => (
      <th key={c} className="px-2 py-1 text-left font-semibold">
        {c}
      </th>
    ))}
  </tr>
);
