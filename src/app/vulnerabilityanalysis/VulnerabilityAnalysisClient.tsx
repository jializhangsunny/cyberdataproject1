"use client";

import React, { useState, useEffect } from "react";
import { Card } from "@/components/ui/card";
import Link from "next/link";
import { useAppContext } from "@/context/appcontext";
import { useAuth } from "@/context/authContext";
import organizationService from "@/services/organizations";
import exploitService from "@/services/exploits";
import threatActorService from "@/services/threatActors";

interface VlOption {
  lbl: string;
  val: number;
}

interface Organization {
  id: string;
  name: string;
  location: string;
  sector: string;
  vulnerabilities?: OrganizationVulnerability[];
}

interface OrganizationVulnerability {
  id: string;
  vulnerabilityId: string;
  affectedSystem: string;
  status: string;
  vulnerabilityLevel: string;
}

interface ThreatActor {
  id: string;
  name: string;
  sophisticationLevel: string;
  resourceLevel: string;
  location: string;
  sector: string;
}

interface Exploit {
  id: string;
  vulnerabilityId: string;
  attackPattern: string;
  toolMalwareUsed: string;
  cvssScore: number;
}

interface OverlappingVulnerability {
  vulnerabilityId: string;
  organizationVulnerability: {
    id: string;
    affectedSystem: string;
    status: string;
    vulnerabilityLevel: string;
  };
  threatActorExploits: Array<{
    id: string;
    threatActor: {
      id: string;
      name: string;
    };
    attackPattern: string;
    toolMalwareUsed: string;
    cvssScore: number;
  }>;
}

const VL_OPTS: VlOption[] = [
  { lbl: "Very Low",  val: 0   },
  { lbl: "Low",       val: 0.2 },
  { lbl: "Moderate",  val: 0.5 },
  { lbl: "High",      val: 0.8 },
  { lbl: "Very High", val: 1   },
];

// Color mapping for status
const statusColor = (s: string): string =>
    s === "Patched"
    ? "bg-green-100 text-green-700"
    : s === "In Progress"
    ? "bg-yellow-100 text-yellow-700"
    : "bg-red-100 text-red-700"; // Active

interface TdProps extends React.TdHTMLAttributes<HTMLTableCellElement> {
  children: React.ReactNode;
  className?: string;
}

const Td: React.FC<TdProps> = ({ children, className = "", ...rest }) => (
  <td
    {...rest}
    className={`px-2 py-1 border-t border-gray-300 ${className}`}
  >
    {children}
  </td>
);

export default function VulnerabilityAnalysisClient() {
  const { tefValue, settotalLef, selectedThreatActorId, setSelectedThreatActorId } = useAppContext();
  const { user } = useAuth();
  
  // State for backend data
  const [userOrganization, setUserOrganization] = useState<Organization | null>(null);
  const [threatActors, setThreatActors] = useState<ThreatActor[]>([]);
  const [orgVulnerabilities, setOrgVulnerabilities] = useState<OrganizationVulnerability[]>([]);
  const [threatActorExploits, setThreatActorExploits] = useState<Exploit[]>([]);
  const [overlappingVulnerabilities, setOverlappingVulnerabilities] = useState<OverlappingVulnerability[]>([]);
  const [error, setError] = useState<string | null>(null);
  const [isInitialLoading, setIsInitialLoading] = useState<boolean>(true);
  const [isLoadingOverlapping, setIsLoadingOverlapping] = useState<boolean>(false);
  
  // State for VL values and status changes
  const [vlValues, setVlValues] = useState<{ [key: string]: number }>({});
  const [statusChanges, setStatusChanges] = useState<{ [key: string]: string }>({});
  
  // Guide state
  const [showGuide, setShowGuide] = useState<boolean>(false);

  // Load initial data
  useEffect(() => {
    const loadInitialData = async () => {
      try {
        setError(null);

        // Load threat actors
        const threatActorsData = await threatActorService.getAll();
        setThreatActors(threatActorsData);

        // Load user's organization if they have one
        if (user?.organization?.id) {
          const orgData = await organizationService.getById(user.organization.id);
          setUserOrganization(orgData);
        } else {
          setError("You are not associated with any organization. Please contact your administrator.");
          return;
        }
      } catch (err: any) {
        console.error("Error loading initial data:", err);
        setError(err.message || "Failed to load data");
      } finally {
        setIsInitialLoading(false);
      }
    };
    
    if (user) {
      loadInitialData();
    }
  }, [user]);

  // Load organization vulnerabilities when organization is available
  useEffect(() => {
    if (userOrganization) {
      loadOrganizationData();
    }
  }, [userOrganization]);

  // Load overlapping vulnerabilities when organization and threat actor context changes
  useEffect(() => {
    if (userOrganization) {
      loadOverlappingVulnerabilities();
    }
  }, [userOrganization?.id, selectedThreatActorId]); // Use userOrganization.id instead of entire object

  // Load exploits when threat actor changes
  useEffect(() => {
    loadThreatActorExploits();
  }, [selectedThreatActorId]);

  const loadOrganizationData = async () => {
    if (!userOrganization) return;
    
    try {
      // Refresh organization data to get latest vulnerabilities
      const orgData = await organizationService.getById(userOrganization.id);
      setUserOrganization(orgData);
      setOrgVulnerabilities(orgData.vulnerabilities || []);
      
      // Initialize VL values and status changes based on current data
      // BUT preserve any existing user selections
      const initialVlValues: { [key: string]: number } = {};
      const initialStatusChanges: { [key: string]: string } = {};
      
      orgData.vulnerabilities?.forEach((vuln: OrganizationVulnerability) => {
        // Check if user has already made a selection for this vulnerability
        const hasExistingVlSelection = vlValues[vuln.vulnerabilityId] !== undefined;
        const hasExistingStatusSelection = statusChanges[vuln.id] !== undefined;
        
        // Only set initial VL if user hasn't made a selection
        if (!hasExistingVlSelection) {
          let initialVl = 0.5; // default moderate
          
          if (vuln.status === "Patched") {
            initialVl = 0;
          } else if (vuln.status === "Active") {
            switch (vuln.vulnerabilityLevel) {
              case "Very High": initialVl = 1; break;
              case "High": initialVl = 0.8; break;
              case "Moderate": initialVl = 0.5; break;
              case "Low": initialVl = 0.2; break;
              case "Very Low": initialVl = 0; break;
              default: initialVl = 0.5;
            }
          } else if (vuln.status === "In Progress") {
            initialVl = 0.5;
          }
          
          initialVlValues[vuln.vulnerabilityId] = initialVl;
        }
        
        // Only set initial status if user hasn't made a selection
        if (!hasExistingStatusSelection) {
          initialStatusChanges[vuln.id] = vuln.status;
        }
      });
      
      // Merge with existing values, preserving user selections
      setVlValues(prev => ({ ...initialVlValues, ...prev }));
      setStatusChanges(prev => ({ ...initialStatusChanges, ...prev }));
      
    } catch (error: any) {
      console.error("Error loading organization data:", error);
      setError(error.message || "Failed to load organization data");
    }
  };

  const loadOverlappingVulnerabilities = async () => {
    if (!userOrganization?.id) return;
    
    setIsLoadingOverlapping(true);
    try {
      const overlappingData = await organizationService.getOverlappingVulnerabilities(
        userOrganization.id, 
        selectedThreatActorId ?? null
      );
      
      // Remove duplicates based on vulnerabilityId
      const uniqueOverlapping: OverlappingVulnerability[] = [];
      const seenVulnIds = new Set<string>();
      
      (overlappingData.overlappingVulnerabilities || []).forEach((overlap: OverlappingVulnerability) => {
        if (!seenVulnIds.has(overlap.vulnerabilityId)) {
          seenVulnIds.add(overlap.vulnerabilityId);
          uniqueOverlapping.push(overlap);
        }
      });
      
      setOverlappingVulnerabilities(uniqueOverlapping);
    } catch (error: any) {
      console.error("Error loading overlapping vulnerabilities:", error);
      // Don't clear the array on error, keep previous data
    } finally {
      setIsLoadingOverlapping(false);
    }
  };

  const loadThreatActorExploits = async () => {
    try {
      if (!selectedThreatActorId) {
        const allExploits = await exploitService.getAll();
        setThreatActorExploits(allExploits);
      } else {
        const exploits = await exploitService.getByThreatActor(selectedThreatActorId);
        setThreatActorExploits(exploits);
      }
    } catch (error: any) {
      console.error("Error loading threat actor exploits:", error);
    }
  };

  // Calculate individual LEF values: VL × TEF for each vulnerability
  const lefArr = overlappingVulnerabilities.map(overlap => {
    const vl = vlValues[overlap.vulnerabilityId] ?? 0; // VL value from dropdown (0, 0.2, 0.5, 0.8, 1)
    return vl * tefValue; // LEF = VL × TEF
  });
  
  // Total LEF = Sum of all individual LEF values ÷ Number of vulnerabilities
  const totalLEF = lefArr.length > 0 
    ? lefArr.reduce((sum, v) => sum + v, 0) / lefArr.length
    : 0;

  useEffect(() => {
    settotalLef(totalLEF);
  }, [totalLEF, settotalLef]);

  const handleVLChange = (vulnerabilityId: string, value: number) => {
    setVlValues(prev => ({ ...prev, [vulnerabilityId]: value }));
  };

  const handleStatusChange = async (vulnerabilityId: string, newStatus: string) => {
    if (!userOrganization) return;
    
    try {
      // Update in backend
      await organizationService.updateVulnerability(userOrganization.id, vulnerabilityId, {
        status: newStatus
      });
      
      // Update local state
      setStatusChanges(prev => ({ ...prev, [vulnerabilityId]: newStatus }));
      
      // Reload data to get updated information
      loadOrganizationData();
    } catch (error: any) {
      console.error("Error updating vulnerability status:", error);
      setError("Failed to update vulnerability status");
    }
  };

  const handleThreatActorChange = (threatActorId: string) => {
    setSelectedThreatActorId(threatActorId || null);
  };

  const getCurrentStatus = (vulnerability: OrganizationVulnerability): string => {
    return statusChanges[vulnerability.id] || vulnerability.status;
  };

  // Get selected threat actor name for display
  const selectedThreatActorName = threatActors.find(ta => ta.id === selectedThreatActorId)?.name || "All Threat Actors";

  // Show initial loading state
  if (isInitialLoading) {
    return (
      <div className="flex h-screen bg-gray-900 text-white items-center justify-center">
        <div className="text-2xl">Loading...</div>
      </div>
    );
  }

  // Show error state
  if (error && !userOrganization) {
    return (
      <div className="flex h-screen bg-gray-900 text-white items-center justify-center">
        <div className="text-center">
          <div className="text-2xl text-red-500 mb-4">Error: {error}</div>
          <button 
            onClick={() => window.location.reload()} 
            className="px-4 py-2 bg-blue-600 rounded hover:bg-blue-700"
          >
            Retry
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="flex h-screen bg-gray-900 text-white">
      {/* Sidebar */}
      <div className="w-1/4 bg-gray-800 p-6">
        <h2 className="text-2xl font-bold mb-4">Navigation</h2>
        <nav className="flex flex-col space-y-4">
          <Link href="/" className="p-3 bg-gray-700 text-gray-300 rounded-md hover:bg-gray-600">
            Threat Actor Analysis
          </Link>
          <Link href="/vulnerabilityanalysis" className="p-3 bg-blue-500 text-white rounded-md hover:bg-blue-600">
            Vulnerability Analysis
          </Link>
          <Link href="/riskanalysis" className="p-3 bg-gray-700 text-gray-300 rounded-md hover:bg-gray-600">
            Risk Analysis
          </Link>
          <Link href="/securitycontrolsanalysis" className="p-3 bg-gray-700 text-gray-300 rounded-md hover:bg-gray-600">
            Security Controls Analysis
          </Link>
        </nav>
      </div>

      {/* Main Content */}
      <div className="w-3/4 p-6 space-y-8 overflow-y-auto">
        <h1 className="text-2xl font-bold mb-6">Vulnerability Analysis</h1>

          <div>
            <Card className="p-4 bg-gray-800">
              <h2 className="text-xl font-semibold mb-2 text-white">Change Threat Actor</h2>
              <select
                value={selectedThreatActorId || ""}
                onChange={(e) => handleThreatActorChange(e.target.value)}
                className="w-full p-2 border rounded-md bg-white text-black"
              >
                <option value="">All threat actors</option>
                {threatActors.map(ta => (
                  <option key={ta.id} value={ta.id}>{ta.name}</option>
                ))}
              </select>
            </Card>
          </div>

        {/* Threat Actor Name */}
        <Card className="p-4 text-center bg-gray-800 mb-6">
          <h1 className="text-3xl text-white font-bold">
            Threat Actor Name: {selectedThreatActorName}
          </h1>
        </Card>

        {/* Organization and Threat Actor Selection */}
        <div className="mb-6 space-y-4">
          {/* Organization Display (Read-only) */}
          {/* <div>
            <label className="block text-sm font-medium mb-2">Your Organization:</label>
            <div className="bg-gray-700 text-white px-3 py-2 rounded-md w-64 border border-gray-600">
              {userOrganization?.name || "No organization assigned"}
            </div>
            <p className="text-xs text-gray-400 mt-1">
              You can only view vulnerabilities for your assigned organization
            </p>
          </div> */}
          


          {/* Current Analysis Context */}
          <div className="p-4 bg-gray-800 rounded-md border border-gray-600">
            <h3 className="text-lg font-semibold mb-2 text-white">Analysis Context</h3>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
              <div>
                <span className="text-gray-400">Organization:</span>
                <p className="text-white font-medium">
                  {userOrganization?.name || "None assigned"}
                </p>
              </div>
              <div>
                <span className="text-gray-400">Threat Actor:</span>
                <p className="text-white font-medium">{selectedThreatActorName}</p>
              </div>
              <div>
                <span className="text-gray-400">TEF Value:</span>
                <p className="text-white font-medium">{tefValue.toFixed(6)}</p>
              </div>
            </div>
          </div>
        </div>

        <div className="space-y-8">
          {/* Organization Vulnerabilities Section */}
          {userOrganization && (
            <TableCard title={`${userOrganization.name} Vulnerabilities (Vo)`}>
              <thead>
                <HeadRow cells={["Vulnerability ID", "Affected System", "Vulnerability Level", "Status"]} />
              </thead>
              <tbody>
                {orgVulnerabilities.length > 0 ? (
                  orgVulnerabilities.map((vuln) => (
                    <tr key={vuln.id} className="border-t border-gray-600">
                      <Td>{vuln.vulnerabilityId}</Td>
                      <Td>{vuln.affectedSystem}</Td>
                      <Td>{vuln.vulnerabilityLevel}</Td>
                      <Td className={statusColor(getCurrentStatus(vuln))}>
                        <select
                          value={getCurrentStatus(vuln)}
                          onChange={(e) => handleStatusChange(vuln.id, e.target.value)}
                          className="bg-transparent outline-none px-2 py-1"
                        >
                          {["Active", "Patched", "In Progress"].map((s) => (
                            <option key={s} value={s}>{s}</option>
                          ))}
                        </select>
                      </Td>
                    </tr>
                  ))
                ) : (
                  <tr className="border-t border-gray-600">
                    <Td colSpan={4} className="text-center text-gray-500">
                      No vulnerabilities found for your organization
                    </Td>
                  </tr>
                )}
              </tbody>
            </TableCard>
          )}

          {/* Threat Actor Exploits Section */}
          <TableCard title={`Threat Actor Known Exploits (Vt) - ${selectedThreatActorName}`}>
            <thead>
              <HeadRow cells={["Vulnerability ID", "Attack Pattern", "Tool/Malware Used", "CVSS Score"]} />
            </thead>
            <tbody>
              {threatActorExploits.length > 0 ? (
                threatActorExploits.map(exploit => (
                  <tr key={exploit.id} className="border-t border-gray-600">
                    <Td>{exploit.vulnerabilityId || "N/A"}</Td>
                    <Td>{exploit.attackPattern || "N/A"}</Td>
                    <Td>{exploit.toolMalwareUsed || "N/A"}</Td>
                    <Td>{exploit.cvssScore || "N/A"}</Td>
                  </tr>
                ))
              ) : (
                <tr className="border-t border-gray-600">
                  <Td colSpan={4} className="text-center text-gray-500">
                    No exploits found for the selected threat actor
                  </Td>
                </tr>
              )}
            </tbody>
          </TableCard>

          {/* Overlapping Vulnerabilities Section - Always render, conditionally show content */}
          <TableCard title={`Common Vulnerabilities (Vtn = Vo ∩ Vt) - ${overlappingVulnerabilities.length} unique vulnerabilities`}>
            <thead>
              <HeadRow cells={["Vulnerability ID", "Affected System", "Status", "Vulnerability Level (VL)", "LEF Value", "Threat Actors"]} />
            </thead>
            <tbody>
              {isLoadingOverlapping ? (
                <tr className="border-t border-gray-600">
                  <Td colSpan={6} className="text-center text-gray-500">
                    Loading overlapping vulnerabilities...
                  </Td>
                </tr>
              ) : overlappingVulnerabilities.length > 0 ? (
                overlappingVulnerabilities.map(overlap => {
                  const vl = vlValues[overlap.vulnerabilityId] ?? 0;
                  const orgVuln = overlap.organizationVulnerability;
                  const threatActorCount = overlap.threatActorExploits?.length || 0;
                  
                  return (
                    <tr key={overlap.vulnerabilityId} className="border-t border-gray-600">
                      <Td>{overlap.vulnerabilityId}</Td>
                      <Td>{orgVuln.affectedSystem}</Td>
                      <Td className={statusColor(orgVuln.status)}>{orgVuln.status}</Td>
                      <Td>
                        <select
                          value={vl}
                          onChange={e => handleVLChange(overlap.vulnerabilityId, parseFloat(e.target.value))}
                          className="bg-blue-700 rounded px-2 py-1 text-sm"
                        >
                          {VL_OPTS.map(o => <option key={o.val} value={o.val}>{o.lbl}</option>)}
                        </select>
                      </Td>
                      <Td className={(vl * tefValue) >= 1.0 ? "font-bold text-red-300" : ""}>{(vl * tefValue).toFixed(8)}</Td>
                      <Td>
                        <span className="text-xs bg-gray-600 px-2 py-1 rounded">
                          {threatActorCount} exploit{threatActorCount !== 1 ? 's' : ''}
                        </span>
                      </Td>
                    </tr>
                  );
                })
              ) : (
                <tr className="border-t border-gray-600">
                  <Td colSpan={6} className="text-center text-gray-500">
                    {userOrganization ? 
                      `No overlapping vulnerabilities found between ${userOrganization.name} and ${selectedThreatActorName}.` :
                      "No data available"
                    }
                  </Td>
                </tr>
              )}
            </tbody>
          </TableCard>

          {/* Total LEF */}
          <Card className="p-6 mb-8 bg-gray-800">
            <h2 className="text-xl text-red-500 font-semibold mb-4">Total LEF Value (Average)</h2>
            <div className="space-y-2">
              <p className="text-red-500 text-2xl font-bold">Total LEF = {totalLEF.toFixed(4)}</p>
              <p className="text-sm text-gray-300">
                Calculated as average of {overlappingVulnerabilities.length} vulnerability LEF scores
              </p>
              <p className="text-xs text-gray-400">
                Formula: Sum(VL₁×TEF, VL₂×TEF, ..., VLₙ×TEF) ÷ Number of vulnerabilities
              </p>
            </div>
          </Card>
        </div>
      </div>

      {/* Floating toggle button */}
      <button
        onClick={() => setShowGuide(true)}
        className="fixed bottom-6 right-6 z-50 bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-full shadow-lg"
      >
        VL Assessment Reference Guide
      </button>

      {/* VL Assessment Reference Guide */}
      {showGuide && (
        <div className="fixed inset-0 z-40 flex items-center justify-center">
          <div
            className="absolute inset-0 bg-black/50"
            onClick={() => setShowGuide(false)}
          />
          <div className="relative z-50 w-[90%] max-w-md bg-white text-black rounded-lg shadow-xl p-6 space-y-4">
            <h3 className="text-xl font-bold text-center">VL Assessment Reference Guide</h3>
            <ul className="text-sm list-disc pl-5 space-y-1">
              <li><b>VL = 1</b>: Very High vulnerability level and Status is <b>Active</b></li>
              <li><b>VL = 0.8</b>: High vulnerability level and Status is <b>Active</b></li>
              <li><b>VL = 0.5</b>: Moderate vulnerability level or <b>In Progress</b> status</li>
              <li><b>VL = 0.2</b>: Low vulnerability level</li>
              <li><b>VL = 0</b>: <b>Patched vulnerability</b> or Very Low level</li>
            </ul>
            
            <div className="border-t pt-3">
              <h4 className="font-bold text-sm mb-2">LEF Calculation:</h4>
              <p className="text-xs text-gray-600">
                LEF = min(VL × TEF, 1.0)<br/>
                Total LEF = Average of all individual LEF values
              </p>
            </div>
            
            <button
              onClick={() => setShowGuide(false)}
              className="mt-2 w-full bg-blue-600 hover:bg-blue-700 text-white py-2 rounded-md"
            >
              Close
            </button>
          </div>
        </div>
      )}
    </div>
  );
}

interface TableCardProps {
  title: string;
  children: React.ReactNode;
}

function TableCard({ title, children }: TableCardProps) {
  return (
    <Card className="bg-white text-black p-4 min-w-[340px] shadow">
      <h2 className="text-lg font-bold mb-2">{title}</h2>
      <div className="overflow-x-auto">
        <table className="w-full text-sm border border-gray-300">{children}</table>
      </div>
    </Card>
  );
}

interface HeadRowProps {
  cells: string[];
}

const HeadRow: React.FC<HeadRowProps> = ({ cells }) => (
  <tr className="bg-gray-200 border-b border-gray-300">
    {cells.map((c) => (
      <th key={c} className="px-2 py-1 text-left font-semibold">
        {c}
      </th>
    ))}
  </tr>
);