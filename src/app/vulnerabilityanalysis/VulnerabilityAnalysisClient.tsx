"use client";

import React, { useState, useEffect } from "react";
import { Card } from "@/components/ui/card";
import Link from "next/link";
import { useAppContext } from "@/context/appcontext";

// 数据部分
const INTERNAL_VULNERABILITIES = [
  { id: "CVE-2017-0144", cvss: 8.1, system: "Microsoft Windows", status: "Patched" },
  { id: "CVE-2017-5638", cvss: 9.8, system: "Apache Struts 2 Framework", status: "Active" },
  { id: "CVE-2018-11776", cvss: 9.8, system: "Apache Struts", status: "In Progress" },
];

const EXTERNAL_EXPLOITS = [
  { id: "CVE-2017-0144", pattern: "SMB Remote Code Execution" },
  { id: "CVE-2017-5638", pattern: "Remote Code Execution" },
  { id: "CVE-2021-44228", pattern: "Remote Code Execution" },
];

const VL_OPTIONS = [
  { label: "Very Low", value: 0 },
  { label: "Low", value: 0.2 },
  { label: "Moderate", value: 0.5 },
  { label: "High", value: 0.8 },
  { label: "Very High", value: 1 },
];

export default function VulnerabilityAnalysisClient() {
  const { tefValue, settotalLef } = useAppContext();
  const [vlValues, setVlValues] = useState<{ [key: string]: number }>({});
  const [isGuideVisible, setIsGuideVisible] = useState(false);

  const commonVulnerabilities = INTERNAL_VULNERABILITIES.filter((v) =>
    EXTERNAL_EXPLOITS.some((e) => e.id === v.id)
  ).map((v) => ({
    ...v,
    pattern: EXTERNAL_EXPLOITS.find((e) => e.id === v.id)?.pattern || "",
  }));

  const calculateLEF = (vl: number) => vl * tefValue;
  const totalLEF = Object.values(vlValues).reduce((acc, vl) => acc + calculateLEF(vl), 0) / 2;

  useEffect(() => {
    settotalLef(totalLEF);
  }, [totalLEF]);

  const handleVLChange = (id: string, value: number) => {
    setVlValues((prev) => ({ ...prev, [id]: value }));
  };

  return (
    <div className="flex h-screen bg-gray-900 text-white">
      {/* Sidebar */}
      <div className="w-1/4 bg-gray-800 p-6">
        <h2 className="text-2xl font-bold mb-4">Navigation</h2>
        <nav className="flex flex-col space-y-4">
          <Link href="/" className="p-3 bg-gray-700 text-gray-300 rounded-md hover:bg-gray-600">Threat Actor Analysis</Link>
          <Link href="/vulnerabilityanalysis" className="p-3 bg-blue-500 text-white rounded-md hover:bg-blue-600">Vulnerability Analysis</Link>
          <Link href="/riskanalysis" className="p-3 bg-gray-700 text-gray-300 rounded-md hover:bg-gray-600">Risk Analysis</Link>
          <Link href="/securitycontrolsanalysis" className="p-3 bg-gray-700 text-gray-300 rounded-md hover:bg-gray-600">Security Controls Analysis</Link>
        </nav>
      </div>

      {/* Main Content */}
      <div className="w-3/4 p-6 overflow-y-auto">
        <h1 className="text-2xl font-bold mb-6">Vulnerability Analysis</h1>

        {/* Vo Section */}
        <Card className="p-6 mb-8 bg-gray-300">
          <h2 className="text-xl font-semibold mb-4">Organization Vulnerabilities</h2>
          {INTERNAL_VULNERABILITIES.map((v) => (
            <div key={v.id} className="mb-4">
              <p><strong>Vulnerability ID:</strong> {v.id}</p>
              <p><strong>CVSS:</strong> {v.cvss}</p>
              <p><strong>System:</strong> {v.system}</p>
              <p>
                <strong>Status:</strong>{" "}
                <select className="bg-red-400 p-2 rounded-md" defaultValue={v.status}>
                  <option>Active</option>
                  <option>Patched</option>
                  <option>In Progress</option>
                </select>
              </p>
            </div>
          ))}
        </Card>

        {/* Vtn Section */}
        <Card className="p-6 mb-8 bg-gray-300">
          <h2 className="text-xl font-semibold mb-4">Common Vulnerabilities (Vtn)</h2>
          {commonVulnerabilities.map((v) => {
            const vl = vlValues[v.id] || 0;
            const lef = calculateLEF(vl);
            return (
              <div key={v.id} className="mb-6">
                <p><strong>ID:</strong> {v.id}</p>
                <p><strong>Pattern:</strong> {v.pattern}</p>
                <p>
                  <strong>VL:</strong>{" "}
                  <select value={vl} onChange={(e) => handleVLChange(v.id, parseFloat(e.target.value))} className="bg-blue-300 p-2 rounded-md">
                    {VL_OPTIONS.map((opt) => (
                      <option key={opt.value} value={opt.value}>{opt.label}</option>
                    ))}
                  </select>
                </p>
                <p className="text-green-500 font-bold">LEF Value: {lef.toFixed(4)}</p>
              </div>
            );
          })}
        </Card>

        {/* Total LEF */}
        <Card className="p-6 mb-8 bg-gray-800">
          <h2 className="text-xl text-red-500 font-semibold mb-4">Total LEF Value</h2>
          <p className="text-red-500 text-2xl font-bold">Total LEF = {totalLEF.toFixed(4)}</p>
        </Card>
      </div>
    </div>
  );
}
